;to track the information of recursion
: 
;; (list 1 2 3 4) -> (list 1 4 2 3)

;;list-> list


; accumultor is very important to trace the recursion state ! important 
; delete the last item of list ---> afterwords we will move it in local

(define (sort1 list)
        (cond [(empty? list) empty]
              [else (if (= 0 (- (length list) 1)) empty (cons (first list) (sort1 (rest list))))]
        ))





; delete the first item from list using accmulator
(define (sort2 list) (local [(define (real_sort list acc)
                                (cond [(empty? list) empty]
                                       [else (if (= 1 acc) (real_sort (rest list) (add1 acc)) (cons (first list) (real_sort (rest list) (add1 acc))))]
                                       

                                 )
                               )  ] (real_sort (sort1 list) 1)))





(sort2 (list 1 2 3 4 5))


;; now we can appned first and last element on list using list ref and can produce full list ;;


